{"version":3,"sources":["application_event_logger.js"],"names":[],"mappings":"AAAA;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;;;;IAQa;;;;;;;AAKX,WALW,sBAKX,GAAc;0BALH,wBAKG;;kEALH,oCAKG;GAAd;;;;;;;;eALW;;wBAaP,mBAAmB;;;AACrB,aAAO,KAAK,YAAL,GACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,eAAO,QAAQ,cAAR,CAAuB,0BAAvB,EAAmD,OAAnD,EAA4D,IAA5D,CAAiE,YAAM;AAC1E,cAAI,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACrC,oBAAQ,EAAR,CAAW,OAAX,EAAoB,OAApB,EADqC;WAAb,CAAtB,CADsE;AAI1E,iBAAK,OAAL,CAAa,IAAb,CAAkB,yBAAlB,EAJ0E;AAK1E,iBAAO,QAAQ,OAAR,CAAgB,0BAAhB,WAAmD,kBAAkB,WAAlB,SAAiC,kBAAkB,IAAlB,CAAuB,WAAvB,EAApF,EAA4H,IAAI,MAAJ,CAAW,KAAK,SAAL,CAAe,iBAAf,CAAX,CAA5H,EAA2K;AAChL,uBAAW,KAAX;AACA,wBAAY,IAAZ;AACA,sBAAU,CAAV;AACA,wBAAU,iBAAO,GAAP,CAAW,wBAAX,CAAV;AACA,uBAAW,kBAAkB,GAAlB,CAAsB,QAAtB,EAAX;AACA,2BAAe,kBAAkB,aAAlB;AACf,kBAAM,qBAAN;WAPK,KAQD,OARC,CALmE;SAAN,CAAjE,CAcF,IAdE,CAcG,YAAM;AACZ,iBAAK,OAAL,CAAa,IAAb,CAAkB,iBAAlB,EADY;AAEZ,iBAAO,QAAQ,KAAR,EAAP,CAFY;SAAN,CAdH,CAkBJ,KAlBI,CAkBE,UAAC,GAAD,EAAS;AACd,iBAAK,OAAL,CAAa,KAAb,CAAmB,GAAnB,EADc;AAEd,iBAAK,OAAL,CAAa,IAAb,CAAkB,iBAAlB,EAFc;AAGd,iBAAO,QAAQ,KAAR,GAAgB,IAAhB,CAAqB,YAAM;AAChC,kBAAM,GAAN,CADgC;WAAN,CAA5B,CAHc;SAAT,CAlBT,CADiB;OAAb,CADR,CADqB;;;;SAbZ;;;kBA8CL","file":"application_event_logger.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport {\n  RabbitConnectorBase\n}\nfrom './rabbit_connector_base';\n/**\n * Logger class to save application events\n * @extends {RabbitConnectorBase}\n */\nexport class ApplicationEventLogger extends RabbitConnectorBase {\n\n  /**\n   * create a new event logger\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * logs a log message to the event log for an applicaiton\n   * @param {ExecutionLogEvent} executionLogEvent - the event to log\n   */\n  log(executionLogEvent) {\n    return this._openChannel()\n      .then((channel) => {\n        return channel.assertExchange('application-log-messages', 'topic').then(() => {\n            let drained = new Promise((resolve) => {\n              channel.on('drain', resolve);\n            });\n            this._logger.info('sending application log');\n            return channel.publish('application-log-messages', `log.${executionLogEvent.application}.${executionLogEvent.type.toLowerCase()}`, new Buffer(JSON.stringify(executionLogEvent)), {\n              mandatory: false,\n              persistent: true,\n              priority: 3,\n              appId: `${config.get('Hoist.application.name')}`,\n              messageId: executionLogEvent._id.toString(),\n              correlationId: executionLogEvent.correlationId,\n              type: 'Execution Log Event'\n            }) || drained;\n          }).then(() => {\n            this._logger.info('closing channel');\n            return channel.close();\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing channel');\n            return channel.close().then(() => {\n              throw err;\n            });\n          });\n      });\n  }\n}\n\nexport\ndefault ApplicationEventLogger;\n\n/**\n * @external {ExecutionLogEvent} https://github.com/hoist/hoist-model/blob/master/lib/models/execution_log_event.js\n */\n"],"sourceRoot":"/source/"}