{"version":3,"sources":["application_event_logger.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;sBACM,QAAQ;;;;qCACK,yBAAyB;;;;;;;;;IAKnD,sBAAsB;YAAtB,sBAAsB;;;;;;AAKf,WALP,sBAAsB,GAKZ;0BALV,sBAAsB;;AAMxB,+BANE,sBAAsB,6CAMhB;GACT;;;;;;;eAPG,sBAAsB;;WAavB,aAAC,iBAAiB,EAAE;;;AACrB,aAAO,IAAI,CAAC,YAAY,EAAE,CACvB,IAAI,CAAC,UAAC,OAAO,EAAK;AACjB,eAAO,OAAO,CAAC,cAAc,CAAC,0BAA0B,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,YAAM;AAC1E,cAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AACrC,mBAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;WAC9B,CAAC,CAAC;AACH,gBAAK,OAAO,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;AAC7C,iBAAO,OAAO,CAAC,OAAO,CAAC,0BAA0B,WAAS,iBAAiB,CAAC,WAAW,SAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,EAAI,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,EAAE;AAChL,qBAAS,EAAE,KAAK;AAChB,sBAAU,EAAE,IAAI;AAChB,oBAAQ,EAAE,CAAC;AACX,iBAAK,OAAK,oBAAO,GAAG,CAAC,wBAAwB,CAAC,AAAE;AAChD,qBAAS,EAAE,iBAAiB,CAAC,GAAG,CAAC,QAAQ,EAAE;AAC3C,yBAAa,EAAE,iBAAiB,CAAC,aAAa;AAC9C,gBAAI,EAAE,qBAAqB;WAC5B,CAAC,IAAI,OAAO,CAAC;SACf,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,gBAAK,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACxC,cAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,iBAAO,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AAChC,mBAAO,UAAU,CAAC,KAAK,EAAE,CAAC;WAC3B,CAAC,CAAC;SACJ,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACd,gBAAK,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxB,gBAAK,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACxC,cAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,iBAAO,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AAChC,mBAAO,UAAU,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AACnC,oBAAM,GAAG,CAAC;aACX,CAAC,CAAC;WACJ,CAAC,CAAC;SACJ,CAAC,CAAC;OACN,CAAC,CAAC;KACN;;;SAhDG,sBAAsB;;;qBAmDb,sBAAsB","file":"application_event_logger.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport RabbitConnectorBase from './rabbit_connector_base';\n/**\n * Logger class to save application events\n * @extends {RabbitConnectorBase}\n */\nclass ApplicationEventLogger extends RabbitConnectorBase {\n\n  /**\n   * create a new event logger\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * logs a log message to the event log for an applicaiton\n   * @param {ExecutionLogEvent} executionLogEvent - the event to log\n   */\n  log(executionLogEvent) {\n    return this._openChannel()\n      .then((channel) => {\n        return channel.assertExchange('application-log-messages', 'topic').then(() => {\n            let drained = new Promise((resolve) => {\n              channel.on('drain', resolve);\n            });\n            this._logger.info('sending application log');\n            return channel.publish('application-log-messages', `log.${executionLogEvent.application}.${executionLogEvent.type.toLowerCase()}`, new Buffer(JSON.stringify(executionLogEvent)), {\n              mandatory: false,\n              persistent: true,\n              priority: 3,\n              appId: `${config.get('Hoist.application.name')}`,\n              messageId: executionLogEvent._id.toString(),\n              correlationId: executionLogEvent.correlationId,\n              type: 'Execution Log Event'\n            }) || drained;\n          }).then(() => {\n            this._logger.info('closing connection');\n            let connection = channel.connection;\n            return channel.close().then(() => {\n              return connection.close();\n            });\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing connection');\n            let connection = channel.connection;\n            return channel.close().then(() => {\n              return connection.close().then(() => {\n                throw err;\n              });\n            });\n          });\n      });\n  }\n}\n\nexport default ApplicationEventLogger;\n\n/**\n * @external {ExecutionLogEvent} https://github.com/hoist/hoist-model/blob/master/lib/models/execution_log_event.js\n */\n"],"sourceRoot":"/source/"}