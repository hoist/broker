{"version":3,"sources":["publisher.js"],"names":[],"mappings":"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","file":"publisher.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport uuid from 'uuid';\nimport AWS from 'aws-sdk';\nimport ApplicationEventLogger from './application_event_logger';\nimport Bluebird from 'bluebird';\nimport {\n  ExecutionLogEvent\n}\nfrom '@hoist/model';\n\n\n/**\n * Takes {@link Event} objects and publishes them to the bus.\n * also saves the paylod to S3\n * @extends {ApplicationEventLogger}\n */\nclass Publisher extends ApplicationEventLogger {\n\n  /**\n   * Create a new Publisher\n   */\n  constructor() {\n    super();\n    var bucketPrefix = '';\n    let configOverrides;\n    if (config.has('Hoist.aws.region')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.region = config.get('Hoist.aws.region');\n\n    }\n    if (config.has('Hoist.aws.account')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.accessKeyId = config.get('Hoist.aws.account');\n    }\n    if (config.has('Hoist.aws.secret')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.secretAccessKey = config.get('Hoist.aws.secret');\n\n    }\n    if (configOverrides) {\n      AWS.config.update(configOverrides);\n    }\n    if (config.has('Hoist.aws.prefix.bucket')) {\n      bucketPrefix = config.get('Hoist.aws.prefix.bucket');\n    }\n    this._payloadBucketName = `${bucketPrefix}event-payload`;\n    this._s3Client = this._s3Client || Bluebird.promisifyAll(new AWS.S3());\n  }\n  _savePayloadToS3(event) {\n\n    return Promise.resolve(uuid.v4())\n      .then((payloadId) => {\n        this._logger.info({\n          bucketName: this._payloadBucketName\n        }, 'looking up bucket');\n        if (!event.payload) {\n          return Promise.resolve(null);\n        }\n        var payload = JSON.stringify(event.payload);\n        return this._s3Client.headBucketAsync({\n            Bucket: this._payloadBucketName\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info({\n              bucketName: this._payloadBucketName\n            }, 'creating bucket');\n            return this._s3Client.createBucketAsync({\n              Bucket: this._payloadBucketName,\n              ACL: 'private'\n            });\n          }).then(() => {\n            this._logger.info({\n              bucketName: this._payloadBucketName\n            }, 'uploading payload');\n            return this._s3Client.uploadAsync({\n              Bucket: this._payloadBucketName,\n              Key: `${event.applicationId}/${payloadId}`,\n              Body: payload,\n              ServerSideEncryption: 'AES256'\n            });\n          }).then(() => {\n            return payloadId;\n          });\n      });\n  }\n  _shallowEvent(event) {\n    return this._savePayloadToS3(event).then((payloadId) => {\n      var jsonObject = event.toJSON();\n      jsonObject.payload = payloadId;\n      return JSON.stringify(jsonObject);\n    });\n  };\n\n\n  /**\n   * publish the event to RabbitMQ and save the paylod to S3\n   * @param {Event} event - the event to publish\n   * @returns {Promise<Event>} - Promise resolves once the event is published to the bus\n   */\n  publish(event) {\n    let applicationId = event.applicationId;\n    let eventQueue = `${applicationId}_events`;\n    return this._openChannel()\n      .then((channel) => {\n        return Promise.all([\n          channel.assertQueue(eventQueue, {\n            durable: true\n          }),\n          channel.assertExchange('hoist', 'topic')\n        ]).then(() => {\n          return channel.bindQueue(eventQueue, 'hoist', `event.${applicationId}.#`);\n        }).then(() => {\n          return this._shallowEvent(event);\n        }).then((shallowEvent) => {\n          return channel.publish('hoist', `event.${applicationId}.${event.eventName}.${event.correlationId}`, new Buffer(shallowEvent), {\n            mandatory: true,\n            persistent: true,\n            priority: 3,\n            appId: `${config.get('Hoist.application.name')}`,\n            messageId: event._id.toString(),\n            correlationId: event.correlationId,\n            type: 'Hoist Event'\n          });\n        });\n      }).then(() => {\n        this.log(new ExecutionLogEvent({\n          application: applicationId,\n          environment: 'live',\n          eventId: event.eventId,\n          correlationId: event.correlationId,\n          moduleName: event.eventName,\n          type: 'EVT',\n          message: `event ${event.eventName} raised (id: ${event.eventId})`\n        }));\n        this._resetTimeout();\n      }).catch((err) => {\n        this._resetTimeout();\n        throw err;\n      });\n\n  }\n}\n\nexport default Publisher;\n"],"sourceRoot":"/source/"}