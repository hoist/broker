{"version":3,"sources":["publisher.js"],"names":[],"mappings":"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","file":"publisher.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport uuid from 'uuid';\nimport AWS from 'aws-sdk';\nimport {\n  ApplicationEventLogger\n}\nfrom './application_event_logger';\nimport Bluebird from 'bluebird';\nimport {\n  ExecutionLogEvent\n}\nfrom '@hoist/model';\n\n\n/**\n * Takes {@link Event} objects and publishes them to the bus.\n * also saves the paylod to S3\n * @extends {ApplicationEventLogger}\n */\nexport class Publisher extends ApplicationEventLogger {\n\n  /**\n   * Create a new Publisher\n   */\n  constructor() {\n    super();\n    var bucketPrefix = '';\n    let configOverrides;\n    if (config.has('Hoist.aws.region')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.region = config.get('Hoist.aws.region');\n\n    }\n    if (config.has('Hoist.aws.account')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.accessKeyId = config.get('Hoist.aws.account');\n    }\n    if (config.has('Hoist.aws.secret')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.secretAccessKey = config.get('Hoist.aws.secret');\n\n    }\n    if (configOverrides) {\n      AWS.config.update(configOverrides);\n    }\n    if (config.has('Hoist.aws.prefix.bucket')) {\n      bucketPrefix = config.get('Hoist.aws.prefix.bucket');\n    }\n    this._payloadBucketName = `${bucketPrefix}event-payload`;\n    this._s3Client = this._s3Client || Bluebird.promisifyAll(new AWS.S3());\n  }\n  _ensureS3Setup() {\n    if (this._s3setup) {\n      return this._s3setup;\n    } else {\n\n      this._s3setup = this._s3Client.headBucketAsync({\n        Bucket: this._payloadBucketName\n      })\n        .catch((err) => {\n          this._logger.error(err);\n          this._logger.info({\n            bucketName: this._payloadBucketName\n          }, 'creating bucket');\n\n          return this._s3Client.createBucketAsync({\n            Bucket: this._payloadBucketName,\n            ACL: 'private'\n          });\n        });\n\n      return this._s3setup;\n    }\n  }\n  _savePayloadToS3(event) {\n\n    return Promise.resolve(uuid.v4())\n      .then((payloadId) => {\n        this._logger.info({\n          bucketName: this._payloadBucketName\n        }, 'looking up bucket');\n        if (!event.payload) {\n          return Promise.resolve(null);\n        }\n        var payload = JSON.stringify(event.payload);\n        return this._ensureS3Setup()\n          .then(() => {\n            this._logger.info({\n              bucketName: this._payloadBucketName\n            }, 'uploading payload');\n            return this._s3Client.uploadAsync({\n              Bucket: this._payloadBucketName,\n              Key: `${event.applicationId}/${payloadId}`,\n              Body: payload,\n              ServerSideEncryption: 'AES256'\n            });\n          }).then(() => {\n            return payloadId;\n          });\n      });\n  }\n  _shallowEvent(event) {\n    return this._savePayloadToS3(event).then((payloadId) => {\n      var jsonObject = event.toJSON();\n      jsonObject.payload = payloadId;\n      return JSON.stringify(jsonObject);\n    });\n  };\n\n\n  /**\n   * publish the event to RabbitMQ and save the paylod to S3\n   * @param {Event} event - the event to publish\n   * @returns {Promise<Event>} - Promise resolves once the event is published to the bus\n   */\n  publish(event) {\n    let applicationId = event.applicationId;\n    let eventQueue = `${applicationId}_events`;\n    return this._openChannel()\n      .then((channel) => {\n        return Promise.all([\n            channel.assertQueue(eventQueue, {\n              durable: true,\n              maxPriority: 10\n            }),\n            channel.assertExchange('hoist', 'topic')\n          ]).then(() => {\n            return channel.bindQueue(eventQueue, 'hoist', `event.${applicationId}.#`);\n          }).then(() => {\n            return this._shallowEvent(event);\n          }).then((shallowEvent) => {\n            let drained = new Promise((resolve) => {\n              channel.on('drain', resolve);\n            });\n            let result = channel.publish('hoist', `event.${applicationId}.${event.eventName}.${event.correlationId}`, new Buffer(shallowEvent), {\n              mandatory: true,\n              persistent: true,\n              priority: event.priority || 3,\n              appId: `${config.get('Hoist.application.name')}`,\n              messageId: event._id.toString(),\n              correlationId: event.correlationId,\n              type: 'Hoist Event'\n            });\n            this._logger.info({\n              result,\n              routingKey: `event.${applicationId}.${event.eventName}.${event.correlationId}`\n            }, 'publish result');\n            return result || drained;\n          }).then(() => {\n            this._logger.info('closing channel');\n            return channel.close();\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing channel');\n            return channel.close().then(() => {\n              throw err;\n            });\n          });\n      }).then(() => {\n        this._logger.info('sending log event');\n        this.log(new ExecutionLogEvent({\n          application: applicationId,\n          environment: 'live',\n          eventId: event.eventId,\n          correlationId: event.correlationId,\n          moduleName: event.eventName,\n          type: 'EVT',\n          message: `event ${event.eventName} raised (id: ${event.eventId})`\n        }));\n      });\n\n  }\n}\n\nexport\ndefault Publisher;\n"],"sourceRoot":"/source/"}