{"version":3,"sources":["publisher.js"],"names":[],"mappings":"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","file":"publisher.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport logger from '@hoist/logger';\nimport amqp from 'amqplib';\nimport uuid from 'uuid';\nimport AWS from 'aws-sdk';\nimport Bluebird from 'bluebird';\n\n\n\n/**\n * Takes {@link Event} objects and publishes them to the bus.\n * also saves the paylod to S3\n */\nclass Publisher {\n\n  /**\n   * Create a new Publisher\n   */\n  constructor() {\n    var bucketPrefix = '';\n    let configOverrides;\n    if (config.has('Hoist.aws.region')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.region = config.get('Hoist.aws.region');\n\n    }\n    if (config.has('Hoist.aws.account')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.accessKeyId = config.get('Hoist.aws.account');\n    }\n    if (config.has('Hoist.aws.secret')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.secretAccessKey = config.get('Hoist.aws.secret');\n\n    }\n    if (configOverrides) {\n      AWS.config.update(configOverrides);\n    }\n    if (config.has('Hoist.aws.prefix.bucket')) {\n      bucketPrefix = config.get('Hoist.aws.prefix.bucket');\n    }\n    this._payloadBucketName = `${bucketPrefix}event-payload`;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    this._s3Client = this._s3Client || Bluebird.promisifyAll(new AWS.S3());\n  }\n  _openChannel() {\n    if (this._idleTimeout) {\n      clearTimeout(this._idleTimeout);\n      delete this._idleTimeout;\n    }\n    if (this._channel) {\n      this._logger.debug('reusing existing channel');\n      return Promise.resolve(this._channel);\n    } else {\n      this._logger.debug('creating new channel');\n      return Promise.resolve(amqp.connect(config.get('Hoist.rabbit.url'), {\n          heartbeat: config.get('Hoist.publisher.heartbeat')\n        }))\n        .then((connection) => {\n          this._logger.debug('connection open');\n          this._logger.info('got a connection, creating channel');\n          this._connection = connection;\n          connection.once('close', () => {\n            if (this._idleTimeout) {\n              clearTimeout(this._idleTimeout);\n              delete this._idelTimeout;\n            }\n            delete this._connection;\n            delete this._channel;\n          });\n          return connection.createChannel();\n        }).then((channel) => {\n          channel.once('close', () => {\n            this._logger.debug('channel closed');\n          });\n          this._logger.debug('channel open');\n          this._logger.info('returning channel');\n          this._channel = channel;\n          return channel;\n        });\n    }\n  }\n  _savePayloadToS3(event) {\n\n    return Promise.resolve(uuid.v4())\n      .then((payloadId) => {\n        var payload = JSON.stringify(event.payload);\n        return this._s3Client.headBucketAsync({\n            Bucket: this._payloadBucketName\n          })\n          .catch(() => {\n            return this._s3Client.createBucketAsync({\n              Bucket: this._payloadBucketName,\n              ACL: 'private'\n            });\n          }).then(() => {\n            return this._s3Client.uploadAsync({\n              Bucket: this._payloadBucketName,\n              Key: `${event.applicationId}/${payloadId}`,\n              Body: payload,\n              ServerSideEncryption: 'AES256'\n            });\n          }).then(() => {\n            return payloadId;\n          });\n      });\n  }\n  _shallowEvent(event) {\n    return this._savePayloadToS3(event).then((payloadId) => {\n      var jsonObject = event.toJSON();\n      jsonObject.payload = payloadId;\n      return JSON.stringify(jsonObject);\n    });\n  };\n\n\n  /**\n   * publish the event to RabbitMQ and save the paylod to S3\n   * @param {Event} event - the event to publish\n   * @returns {Promise<Event>} - Promise resolves once the event is published to the bus\n   */\n  publish(event) {\n    let applicationId = event.applicationId;\n    let eventQueue = `${applicationId}_events`;\n    return this._openChannel()\n      .then((channel) => {\n        return Promise.all([\n          channel.assertQueue(eventQueue, {\n            durable: true\n          }),\n          channel.assertExchange('hoist', 'topic')\n        ]).then(() => {\n          return channel.bindQueue(eventQueue, 'hoist', `event.${applicationId}.#`);\n        }).then(() => {\n          return this._shallowEvent(event);\n        }).then((shallowEvent) => {\n          return channel.publish('hoist', `event.${applicationId}.${event.eventName}`, new Buffer(shallowEvent), {\n            mandatory: true,\n            persistent: true,\n            priority: 3,\n            appId: `${config.get('Hoist.application.name')}`,\n            messageId: event._id.toString(),\n            correlationId: event.correlationId,\n            type: 'Hoist Event'\n          });\n        });\n      }).then(() => {\n        if (this._idleTimeout) {\n          clearTimeout(this._idleTimeout);\n          delete this._idleTimeout;\n        }\n        this._idleTimeout = setTimeout(() => {\n          if (this._connection) {\n            this._connection.close();\n          }\n        }, config.get('Hoist.publisher.timeout'));\n      }).catch((err) => {\n        console.log('in catch');\n        if (this._idleTimeout) {\n          clearTimeout(this._idleTimeout);\n          delete this._idleTimeout;\n        }\n        this._idleTimeout = setTimeout(() => {\n          if (this._connection) {\n            this._connection.close();\n          }\n        }, config.get('Hoist.publisher.timeout'));\n        throw err;\n      });\n\n  }\n}\n\nexport default Publisher;\n"],"sourceRoot":"/source/"}