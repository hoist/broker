{"version":3,"sources":["receiver.js"],"names":[],"mappings":"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","file":"receiver.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport logger from '@hoist/logger';\nimport Bluebird from 'bluebird';\nimport AWS from 'aws-sdk';\nimport {\n  ApplicationEventLogger\n}\nfrom './application_event_logger';\n\nimport {\n  Event\n}\nfrom '@hoist/model';\nimport {\n  clone\n}\nfrom 'lodash';\n\n\n/**\n * Receiver takes messages from RabbitMQ and rehydrates them into events\n */\nexport class Receiver extends ApplicationEventLogger{\n  /**\n   * Create a new receiver\n   */\n  constructor() {\n    super();\n    let configOverrides;\n    if (config.has('Hoist.aws.region')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.region = config.get('Hoist.aws.region');\n    }\n    if (config.has('Hoist.aws.account')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.accessKeyId = config.get('Hoist.aws.account');\n    }\n    if (config.has('Hoist.aws.secret')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.secretAccessKey = config.get('Hoist.aws.secret');\n    }\n    if (configOverrides) {\n      AWS.config.update(configOverrides);\n    }\n    var bucketPrefix = '';\n    if (config.has('Hoist.aws.prefix.bucket')) {\n      bucketPrefix = config.get('Hoist.aws.prefix.bucket');\n    }\n    this._payloadBucketName = `${bucketPrefix}event-payload`;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    this._s3Client = this._s3Client || Bluebird.promisifyAll(new AWS.S3());\n  }\n\n  _populatePayloadFromS3(message) {\n    let m = clone(message);\n    if (!m.payload) {\n      m.payload = {};\n      return Promise.resolve(m);\n    }\n\n    return this._getPayloadFromId(message.applicationId, message.payload)\n      .then((payload) => {\n        delete m.payload;\n        m.payload = payload;\n        return m;\n      }).catch(() => {\n        return message;\n      });\n\n  }\n\n  _getPayloadFromId(applicationId, payloadId) {\n    if (!payloadId) {\n      return Promise.resolve({});\n    }\n    return this._s3Client.getObjectAsync({\n        Bucket: this._payloadBucketName,\n        Key: `${applicationId}/${payloadId}`\n      })\n      .then((response) => {\n        var payload = JSON.parse(response.Body.toString());\n        return payload;\n      }).catch(() => {\n        return null;\n      });\n\n  }\n\n  /**\n   * reconstiute an {@link Event} from a RabbitMQ message\n   * @param {Object} message - the raw rabbitmq message\n   * @returns {Promise<Event>} - the reconstituted event\n   */\n  restore(message) {\n    return this._populatePayloadFromS3(message)\n      .then((messageWithPayload) => {\n        return new Event(messageWithPayload);\n      });\n  }\n\n  subscribe(event, eventName) {\n    let applicationId = event.applicationId;\n    let eventQueue = `${applicationId}_events`;\n    return this._openChannel()\n      .then((channel) => {\n        return Promise.all([\n            channel.assertQueue(eventQueue, {\n              durable: true,\n              maxPriority: 10\n            }),\n            channel.assertExchange('hoist', 'topic')\n          ]).then(() => {\n            return channel.bindQueue(eventQueue, 'hoist', `event.${applicationId}.#`);\n          }).then(() => {\n            return new Promise((resolve) => {\n              channel.on(eventName, resolve);\n            });\n          }).then((result) => {\n            this._logger.info({\n              result,\n              routingKey: `event.${applicationId}.${event.eventName}.${event.correlationId}`\n            }, 'publsh result');\n            this._logger.info('closing channel');\n            return channel.close().then(() => { return result; })\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing channel');\n            return channel.close().then(() => {\n              throw err;\n            });\n          });\n      }).then((result) => {\n        this._logger.info('sending log event');\n        return result;\n      });\n\n  }\n\n\n}\n\nexport default Receiver;\n"],"sourceRoot":"/source/"}