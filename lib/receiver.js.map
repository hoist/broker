{"version":3,"sources":["receiver.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;sBACM,QAAQ;;;;2BACR,eAAe;;;;wBACb,UAAU;;;;sBACf,SAAS;;;;0BAIpB,cAAc;;sBAId,QAAQ;;;;;;IAMP,QAAQ;;;;;AAID,WAJP,QAAQ,GAIE;0BAJV,QAAQ;;AAMV,QAAI,eAAe,YAAA,CAAC;AACpB,QAAI,oBAAO,GAAG,CAAC,kBAAkB,CAAC,EAAE;AAClC,UAAI,CAAC,eAAe,EAAE;AACpB,uBAAe,GAAG,EAAE,CAAC;OACtB;AACD,qBAAe,CAAC,MAAM,GAAG,oBAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;KACzD;AACD,QAAI,oBAAO,GAAG,CAAC,mBAAmB,CAAC,EAAE;AACnC,UAAI,CAAC,eAAe,EAAE;AACpB,uBAAe,GAAG,EAAE,CAAC;OACtB;AACD,qBAAe,CAAC,WAAW,GAAG,oBAAO,GAAG,CAAC,mBAAmB,CAAC,CAAC;KAC/D;AACD,QAAI,oBAAO,GAAG,CAAC,kBAAkB,CAAC,EAAE;AAClC,UAAI,CAAC,eAAe,EAAE;AACpB,uBAAe,GAAG,EAAE,CAAC;OACtB;AACD,qBAAe,CAAC,eAAe,GAAG,oBAAO,GAAG,CAAC,kBAAkB,CAAC,CAAC;KAClE;AACD,QAAI,eAAe,EAAE;AACnB,0BAAI,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;KACpC;AACD,QAAI,YAAY,GAAG,EAAE,CAAC;AACtB,QAAI,oBAAO,GAAG,CAAC,yBAAyB,CAAC,EAAE;AACzC,kBAAY,GAAG,oBAAO,GAAG,CAAC,yBAAyB,CAAC,CAAC;KACtD;AACD,QAAI,CAAC,kBAAkB,GAAM,YAAY,kBAAe,CAAC;AACzD,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;AACH,QAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,sBAAS,YAAY,CAAC,IAAI,oBAAI,EAAE,EAAE,CAAC,CAAC;GACxE;;eArCG,QAAQ;;WAuCU,gCAAC,OAAO,EAAE;AAC9B,UAAI,CAAC,GAAG,YAhDV,KAAK,EAgDW,OAAO,CAAC,CAAC;AACvB,UAAI,CAAC,CAAC,CAAC,OAAO,EAAE;AACd,eAAO,OAAO,CAAC;OAChB;AACD,aAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC;AACjC,cAAM,EAAE,IAAI,CAAC,kBAAkB;AAC/B,WAAG,EAAK,OAAO,CAAC,aAAa,SAAI,OAAO,CAAC,OAAO,AAAE;OACnD,CAAC,CACD,IAAI,CAAC,UAAC,QAAQ,EAAK;AAClB,YAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;AACnD,eAAO,CAAC,CAAC,OAAO,CAAC;AACjB,SAAC,CAAC,OAAO,GAAG,OAAO,CAAC;AACpB,eAAO,CAAC,CAAC;OACV,CAAC,SAAM,CAAC,YAAM;AACb,eAAO,OAAO,CAAC;OAChB,CAAC,CAAC;KACN;;;;;;;;;WAOM,iBAAC,OAAO,EAAE;AACf,aAAO,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CACxC,IAAI,CAAC,UAAC,kBAAkB,EAAK;AAC5B,eAAO,gBA9Eb,KAAK,CA8EkB,kBAAkB,CAAC,CAAC;OACtC,CAAC,CAAC;KACN;;;SApEG,QAAQ;;;qBAuEC,QAAQ","file":"receiver.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport logger from '@hoist/logger';\nimport Bluebird from 'bluebird';\nimport AWS from 'aws-sdk';\nimport {\n  Event\n}\nfrom '@hoist/model';\nimport {\n  clone\n}\nfrom 'lodash';\n\n\n/**\n * Receiver takes messages from RabbitMQ and rehydrates them into events\n */\nclass Receiver {\n  /**\n   * Create a new receiver\n   */\n  constructor() {\n\n    let configOverrides;\n    if (config.has('Hoist.aws.region')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.region = config.get('Hoist.aws.region');\n    }\n    if (config.has('Hoist.aws.account')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.accessKeyId = config.get('Hoist.aws.account');\n    }\n    if (config.has('Hoist.aws.secret')) {\n      if (!configOverrides) {\n        configOverrides = {};\n      }\n      configOverrides.secretAccessKey = config.get('Hoist.aws.secret');\n    }\n    if (configOverrides) {\n      AWS.config.update(configOverrides);\n    }\n    var bucketPrefix = '';\n    if (config.has('Hoist.aws.prefix.bucket')) {\n      bucketPrefix = config.get('Hoist.aws.prefix.bucket');\n    }\n    this._payloadBucketName = `${bucketPrefix}event-payload`;\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n    this._s3Client = this._s3Client || Bluebird.promisifyAll(new AWS.S3());\n  }\n\n  _populatePayloadFromS3(message) {\n    let m = clone(message);\n    if (!m.payload) {\n      return message;\n    }\n    return this._s3Client.getObjectAsync({\n        Bucket: this._payloadBucketName,\n        Key: `${message.applicationId}/${message.payload}`\n      })\n      .then((response) => {\n        var payload = JSON.parse(response.Body.toString());\n        delete m.payload;\n        m.payload = payload;\n        return m;\n      }).catch(() => {\n        return message;\n      });\n  }\n\n  /**\n   * reconstiute an {@link Event} from a RabbitMQ message\n   * @param {Object} message - the raw rabbitmq message\n   * @returns {Promise<Event>} - the reconstituted event\n   */\n  restore(message) {\n    return this._populatePayloadFromS3(message)\n      .then((messageWithPayload) => {\n        return new Event(messageWithPayload);\n      });\n  }\n}\n\nexport default Receiver;\n"],"sourceRoot":"/source/"}