{"version":3,"sources":["rabbit_connector_base.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;uBACI,SAAS;;;;sBACP,QAAQ;;;;2BACR,eAAe;;;;;;;;;IAK5B,mBAAmB;;;;;;;AAMZ,WANP,mBAAmB,GAMT;0BANV,mBAAmB;;AAOrB,QAAI,CAAC,OAAO,GAAG,yBAAO,KAAK,CAAC;AAC1B,SAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;KAC3B,CAAC,CAAC;GACJ;;eAVG,mBAAmB;;;;;;;WAgBV,yBAAG;AACd,UAAI,IAAI,CAAC,YAAY,EAAE;AACrB,oBAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAChC,eAAO,IAAI,CAAC,YAAY,CAAC;OAC1B;KACF;;;;;;;;WAMY,yBAAG;;;AACd,UAAI,CAAC,aAAa,EAAE,CAAC;AACrB,UAAI,CAAC,YAAY,GAAG,UAAU,CAAC,YAAM;AACnC,YAAI,MAAK,WAAW,EAAE;AACpB,gBAAK,WAAW,CAAC,KAAK,EAAE,CAAC;SAC1B;OACF,EAAE,oBAAO,GAAG,CAAC,yBAAyB,CAAC,CAAC,CAAC;KAC3C;;;;;;;;;WAOW,wBAAG;;;AACb,UAAI,CAAC,aAAa,EAAE,CAAC;AACrB,UAAI,IAAI,CAAC,QAAQ,EAAE;AACjB,YAAI,CAAC,OAAO,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC/C,eAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;OACvC,MAAM;AACL,YAAI,CAAC,OAAO,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;AAC3C,eAAO,OAAO,CAAC,OAAO,CAAC,qBAAK,OAAO,CAAC,oBAAO,GAAG,CAAC,kBAAkB,CAAC,EAAE;AAChE,mBAAS,EAAE,oBAAO,GAAG,CAAC,2BAA2B,CAAC;SACnD,CAAC,CAAC,CACF,IAAI,CAAC,UAAC,UAAU,EAAK;AACpB,iBAAK,OAAO,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACtC,iBAAK,OAAO,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;AACxD,iBAAK,WAAW,GAAG,UAAU,CAAC;AAC9B,oBAAU,CAAC,IAAI,CAAC,OAAO,EAAE,YAAM;AAC7B,mBAAK,aAAa,EAAE,CAAC;AACrB,mBAAO,OAAK,WAAW,CAAC;AACxB,mBAAO,OAAK,QAAQ,CAAC;WACtB,CAAC,CAAC;AACH,iBAAO,UAAU,CAAC,aAAa,EAAE,CAAC;SACnC,CAAC,CAAC,IAAI,CAAC,UAAC,OAAO,EAAK;AACnB,iBAAO,CAAC,IAAI,CAAC,OAAO,EAAE,YAAM;AAC1B,mBAAK,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;WACtC,CAAC,CAAC;AACH,iBAAK,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;AACnC,iBAAK,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AACvC,iBAAK,QAAQ,GAAG,OAAO,CAAC;AACxB,iBAAO,OAAO,CAAC;SAChB,CAAC,CAAC;OACN;KACF;;;SAvEG,mBAAmB;;;qBA0EV,mBAAmB","file":"rabbit_connector_base.js","sourcesContent":["'use strict';\nimport amqp from 'amqplib';\nimport config from 'config';\nimport logger from '@hoist/logger';\n/**\n * Base class for managing publising events to rabbit mq\n * manages connection lifecycle etc\n */\nclass RabbitConnectorBase {\n\n  /**\n   * instantiate a new instance\n   * @abstract\n   */\n  constructor() {\n    this._logger = logger.child({\n      cls: this.constructor.name\n    });\n  }\n\n  /**\n   * stop any existing connection timeout\n   * @protected\n   */\n  _clearTimeout() {\n    if (this._idleTimeout) {\n      clearTimeout(this._idleTimeout);\n      delete this._idleTimeout;\n    }\n  }\n\n  /**\n   * stop and restart connection timeout\n   * @protected\n   */\n  _resetTimeout() {\n    this._clearTimeout();\n    this._idleTimeout = setTimeout(() => {\n      if (this._connection) {\n        this._connection.close();\n      }\n    }, config.get('Hoist.publisher.timeout'));\n  }\n\n  /**\n   * open up a new channel to rabbit or reuse an existing one\n   * @protected\n   * @returns {Promise}\n   */\n  _openChannel() {\n    this._clearTimeout();\n    if (this._channel) {\n      this._logger.debug('reusing existing channel');\n      return Promise.resolve(this._channel);\n    } else {\n      this._logger.debug('creating new channel');\n      return Promise.resolve(amqp.connect(config.get('Hoist.rabbit.url'), {\n          heartbeat: config.get('Hoist.publisher.heartbeat')\n        }))\n        .then((connection) => {\n          this._logger.debug('connection open');\n          this._logger.info('got a connection, creating channel');\n          this._connection = connection;\n          connection.once('close', () => {\n            this._clearTimeout();\n            delete this._connection;\n            delete this._channel;\n          });\n          return connection.createChannel();\n        }).then((channel) => {\n          channel.once('close', () => {\n            this._logger.debug('channel closed');\n          });\n          this._logger.debug('channel open');\n          this._logger.info('returning channel');\n          this._channel = channel;\n          return channel;\n        });\n    }\n  }\n}\n\nexport default RabbitConnectorBase;\n"],"sourceRoot":"/source/"}