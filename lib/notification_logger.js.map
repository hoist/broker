{"version":3,"sources":["notification_logger.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;sBACM,QAAQ;;;;qCACK,yBAAyB;;;;;;;;;IAKnD,kBAAkB;;;;;;AAKX,WALP,kBAAkB,GAKR;0BALV,kBAAkB;;AAMpB,+BANE,kBAAkB,6CAMZ;GACT;;YAPG,kBAAkB;;eAAlB,kBAAkB;;;;;;;WAanB,aAAC,YAAY,EAAE;;;AAChB,aAAO,IAAI,CAAC,YAAY,EAAE,CACvB,IAAI,CAAC,UAAC,OAAO,EAAK;AACjB,eAAO,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,YAAM;AACjE,iBAAO,OAAO,CAAC,OAAO,CAAC,eAAe,oBAAkB,YAAY,CAAC,aAAa,SAAI,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAI,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE;AAC7K,qBAAS,EAAE,KAAK;AAChB,sBAAU,EAAE,IAAI;AAChB,oBAAQ,EAAE,CAAC;AACX,iBAAK,OAAK,oBAAO,GAAG,CAAC,wBAAwB,CAAC,AAAE;AAChD,gBAAI,EAAE,cAAc;WACrB,CAAC,CAAC;SACJ,CAAC,CAAC;OACJ,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,cAAK,aAAa,EAAE,CAAC;OACtB,CAAC,SAAM,CAAC,UAAC,GAAG,EAAK;AAChB,cAAK,aAAa,EAAE,CAAC;AACrB,cAAM,GAAG,CAAC;OACX,CAAC,CAAC;KACN;;;SA/BG,kBAAkB;;;qBAkCT,kBAAkB","file":"notification_logger.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport RabbitConnectorBase from './rabbit_connector_base';\n/**\n * Logger class to save application events\n * @extends {RabbitConnectorBase}\n */\nclass NotificationLogger extends RabbitConnectorBase {\n\n  /**\n   * create a new event logger\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * logs a log message to the event log for an applicaiton\n   * @param {Notification} notification - the notificaiton to log\n   */\n  log(notification) {\n    return this._openChannel()\n      .then((channel) => {\n        return channel.assertExchange('notifications', 'topic').then(() => {\n          return channel.publish('notifications', `notification.${notification.applicationId}.${notification.notificationType.toLowerCase()}`, new Buffer(JSON.stringify(notification)), {\n            mandatory: false,\n            persistent: true,\n            priority: 3,\n            appId: `${config.get('Hoist.application.name')}`,\n            type: 'Notification'\n          });\n        });\n      }).then(() => {\n        this._resetTimeout();\n      }).catch((err) => {\n        this._resetTimeout();\n        throw err;\n      });\n  }\n}\n\nexport default NotificationLogger;\n"],"sourceRoot":"/source/"}