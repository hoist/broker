{"version":3,"sources":["notification_logger.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;sBACM,QAAQ;;;;qCACK,yBAAyB;;;;;;;;;IAKnD,kBAAkB;YAAlB,kBAAkB;;;;;;AAKX,WALP,kBAAkB,GAKR;0BALV,kBAAkB;;AAMpB,+BANE,kBAAkB,6CAMZ;GACT;;;;;;;eAPG,kBAAkB;;WAanB,aAAC,YAAY,EAAE;;;AAChB,aAAO,IAAI,CAAC,YAAY,EAAE,CACvB,IAAI,CAAC,UAAC,OAAO,EAAK;AACjB,eAAO,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,YAAM;AAC/D,cAAI,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAK;AACrC,mBAAO,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;WAC9B,CAAC,CAAC;AACH,gBAAK,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;AAC1C,iBAAO,OAAO,CAAC,OAAO,CAAC,eAAe,oBAAkB,YAAY,CAAC,aAAa,SAAI,YAAY,CAAC,gBAAgB,CAAC,WAAW,EAAE,EAAI,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,EAAE;AAC7K,qBAAS,EAAE,KAAK;AAChB,sBAAU,EAAE,IAAI;AAChB,oBAAQ,EAAE,CAAC;AACX,iBAAK,OAAK,oBAAO,GAAG,CAAC,wBAAwB,CAAC,AAAE;AAChD,gBAAI,EAAE,cAAc;WACrB,CAAC,IAAI,OAAO,CAAC;SACf,CAAC,CAAC,IAAI,CAAC,YAAM;AACZ,gBAAK,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACxC,cAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,iBAAO,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AAChC,mBAAO,UAAU,CAAC,KAAK,EAAE,CAAC;WAC3B,CAAC,CAAC;SACJ,CAAC,SACI,CAAC,UAAC,GAAG,EAAK;AACd,gBAAK,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACxB,gBAAK,OAAO,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;AACxC,cAAI,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;AACpC,iBAAO,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AAChC,mBAAO,UAAU,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,YAAM;AACnC,oBAAM,GAAG,CAAC;aACX,CAAC,CAAC;WACJ,CAAC,CAAC;SACJ,CAAC,CAAC;OACN,CAAC,CAAC;KACN;;;SA9CG,kBAAkB;;;qBAiDT,kBAAkB","file":"notification_logger.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport RabbitConnectorBase from './rabbit_connector_base';\n/**\n * Logger class to save application events\n * @extends {RabbitConnectorBase}\n */\nclass NotificationLogger extends RabbitConnectorBase {\n\n  /**\n   * create a new event logger\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * logs a log message to the event log for an applicaiton\n   * @param {Notification} notification - the notificaiton to log\n   */\n  log(notification) {\n    return this._openChannel()\n      .then((channel) => {\n        return channel.assertExchange('notifications', 'topic').then(() => {\n            let drained = new Promise((resolve) => {\n              channel.on('drain', resolve);\n            });\n            this._logger.info('sending notification');\n            return channel.publish('notifications', `notification.${notification.applicationId}.${notification.notificationType.toLowerCase()}`, new Buffer(JSON.stringify(notification)), {\n              mandatory: false,\n              persistent: true,\n              priority: 3,\n              appId: `${config.get('Hoist.application.name')}`,\n              type: 'Notification'\n            }) || drained;\n          }).then(() => {\n            this._logger.info('closing connection');\n            let connection = channel.connection;\n            return channel.close().then(() => {\n              return connection.close();\n            });\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing connection');\n            let connection = channel.connection;\n            return channel.close().then(() => {\n              return connection.close().then(() => {\n                throw err;\n              });\n            });\n          });\n      });\n  }\n}\n\nexport default NotificationLogger;\n"],"sourceRoot":"/source/"}