{"version":3,"sources":["notification_logger.js"],"names":[],"mappings":"AAAA;;;;;;;;;AACA;;;;AACA;;;;;;;;;;;;;;;IAQa;;;;;;;AAKX,WALW,kBAKX,GAAc;0BALH,oBAKG;;kEALH,gCAKG;GAAd;;;;;;;;eALW;;wBAaP,cAAc;;;AAChB,aAAO,KAAK,YAAL,GACJ,IADI,CACC,UAAC,OAAD,EAAa;AACjB,eAAO,QAAQ,cAAR,CAAuB,eAAvB,EAAwC,OAAxC,EAAiD,IAAjD,CAAsD,YAAM;AAC/D,cAAI,UAAU,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AACrC,oBAAQ,EAAR,CAAW,OAAX,EAAoB,OAApB,EADqC;WAAb,CAAtB,CAD2D;AAI/D,iBAAK,OAAL,CAAa,IAAb,CAAkB,sBAAlB,EAJ+D;AAK/D,iBAAO,QAAQ,OAAR,CAAgB,eAAhB,oBAAiD,aAAa,aAAb,SAA8B,aAAa,gBAAb,CAA8B,WAA9B,EAA/E,EAA8H,IAAI,MAAJ,CAAW,KAAK,SAAL,CAAe,YAAf,CAAX,CAA9H,EAAwK;AAC7K,uBAAW,KAAX;AACA,wBAAY,IAAZ;AACA,sBAAU,CAAV;AACA,wBAAU,iBAAO,GAAP,CAAW,wBAAX,CAAV;AACA,kBAAM,cAAN;WALK,KAMD,OANC,CALwD;SAAN,CAAtD,CAYF,IAZE,CAYG,YAAM;AACZ,iBAAK,OAAL,CAAa,IAAb,CAAkB,iBAAlB,EADY;AAEZ,iBAAO,QAAQ,KAAR,EAAP,CAFY;SAAN,CAZH,CAgBJ,KAhBI,CAgBE,UAAC,GAAD,EAAS;AACd,iBAAK,OAAL,CAAa,KAAb,CAAmB,GAAnB,EADc;AAEd,iBAAK,OAAL,CAAa,IAAb,CAAkB,iBAAlB,EAFc;AAGd,iBAAO,QAAQ,KAAR,GAAgB,IAAhB,CAAqB,YAAM;AAChC,kBAAM,GAAN,CADgC;WAAN,CAA5B,CAHc;SAAT,CAhBT,CADiB;OAAb,CADR,CADgB;;;;SAbP;;;kBA4CL","file":"notification_logger.js","sourcesContent":["'use strict';\nimport config from 'config';\nimport {\n  RabbitConnectorBase\n}\nfrom './rabbit_connector_base';\n/**\n * Logger class to save application events\n * @extends {RabbitConnectorBase}\n */\nexport class NotificationLogger extends RabbitConnectorBase {\n\n  /**\n   * create a new event logger\n   */\n  constructor() {\n    super();\n  }\n\n  /**\n   * logs a log message to the event log for an applicaiton\n   * @param {Notification} notification - the notificaiton to log\n   */\n  log(notification) {\n    return this._openChannel()\n      .then((channel) => {\n        return channel.assertExchange('notifications', 'topic').then(() => {\n            let drained = new Promise((resolve) => {\n              channel.on('drain', resolve);\n            });\n            this._logger.info('sending notification');\n            return channel.publish('notifications', `notification.${notification.applicationId}.${notification.notificationType.toLowerCase()}`, new Buffer(JSON.stringify(notification)), {\n              mandatory: false,\n              persistent: true,\n              priority: 3,\n              appId: `${config.get('Hoist.application.name')}`,\n              type: 'Notification'\n            }) || drained;\n          }).then(() => {\n            this._logger.info('closing channel');\n            return channel.close();\n          })\n          .catch((err) => {\n            this._logger.error(err);\n            this._logger.info('closing channel');\n            return channel.close().then(() => {\n              throw err;\n            });\n          });\n      });\n  }\n}\n\nexport\ndefault NotificationLogger;\n"],"sourceRoot":"/source/"}